
# Aussagenlogik
## Allgemein
$A \wedge B$ Konjunktion UND
$A \vee B$ Disjunktion OR
$\neg A$ Negation NOT

## Normalformen
Disjunktive Normalform $((A \wedge B \wedge C) \vee (A \wedge B \wedge C))$
Konjunktive Normalform $((A \vee B \vee C) \wedge (A \vee B \wedge C))$

Zu jeder Wahrheitstabelle in der mindestens eine Aussage wahr ist lässt sich
die Disjunktive normalform bilden.

1. Minterme bilden: Wenn A B C = f f t Minterm: $\neg A \wedge \neg b \wedge
   C$
2. Alle Minterme mit $\vee$ verbinden
3. Minterm nur wenn f(A,B,C) = t

Zu jeder Wahrheitstabelle in der mindestens eine Aussage falsch ist lässt
sich die Konjunktive Normalform bilden.

1. Maxterme bilen: Wenn A B C = f f t Maxterm: $A \vee B \vee \neg C$
2. Alle Maxterme mit $\wedge$ verbinden
3. Maxterm nur wenn f(A,B,C) = f

## Karnaugh-Veitch-Diagramme (KV-Diagramm)
Normalformen
1. Karnaugh Diagramm füllen
\karnaughmap{4}{f(a,b,c,d):}{abcd}{1110011001100110}{}

2. Gruppen Bilden
    für Minterm: 1en gruppieren
    für Maxterm: 0en gruppieren

3. für Minterme 1er Gruppen mit $\vee$ verbinden
    für Maxterme 0er Gruppen invertiert mit $\wedge$ verbinden

## Tautologien, Kontradiktionen und logische äquivalenz
Tautologie: Immer wahr
Kontradiktion: Immer falsch
Logische äquivalenz: Aussage P ist logisch äquivalent/gleichwertig zu aussagen D

## Gesetze der Aussagenlogik
![Gesetze der Aussagenlogik](img/gesetzeDerAussagenlogik.png)

## XOR, NAND und NOR
XOR = Entweder A oder B
NAND = AND invers
NOR = OR invers

## Implikation
Wenn A, dann B
Ist nur falsch, wenn A wahr und B falsch
$A \rightarrow B$

\begin{tabular}{ c c | c c c }
A & B & Implikation & Umkehrung & Kontraposition \\
A & B & $A \Rightarrow B$ & $B \Rightarrow A$ & $\neg B \Rightarrow \neg A$ \\
\hline
w & w & w & w & w \\
w & f & f & w & f \\
f & w & w & f & w \\
f & f & w & w & w \\
\end{tabular}

## Logische Schlüsse
Ein logischer Schluss gilt: Wenn
$A_1 \wedge A_2 \wedge A_3 \Rightarrow C$ immer wahr

$A_1 \wedge A_2 \wedge A_3 \wedge \neg C$ immer falsch

## Resolution
1. Aussagen in KNF umschreiben
2. Leere Menge herleiten



#Prädikatenlogik

##Quantoren
$\forall x \in M$ : x ist sterblich Für alle x in M gilt, x ist sterblich

$\exists p \in P$ : p ist gerade Es existiert ein p in P das gerade ist.

$\neg (\forall x P(x)) \Leftrightarrow \exists x \neg P(x)$

$\neg (\exists x P(x)) \Leftrightarrow \forall x \neg P(x)$

$\exists x (p(x) \wedge q(x)) \Leftrightarrow \neg \forall x (p(x) \rightarrow
\neg q(x))$

$\forall x (p(x) \rightarrow \neg q(x) \Leftrightarrow \exists x (p(x) \wedge
\neg q(x))$

Implikation: $\forall x (p(x) \rightarrow q(x))$

Umkehrung: $\forall x (q(x) \rightarrow p(x))$

Negation: $\exists x (p(x) \wedge \neg q(x))$

Kontraposition: $\forall x (\neg q(x) \rightarrow \neg p(x))$

Implikation $\Leftrightarrow$ Kontraposition


#Mengenlehre

##Mengen und Elemente
Aufzählende Form {a,b,c}

Beschreibende Form: ${x \mid x \in \mathbb{N} \wedge  x \leq 10 } = {1,2,3 ...
10}$

Mächtigkeit: Anzahl Elemente in einer Menge

Potenzmenge: Menge aller Teilmengen

M= {a,b,c} ; P(M) = {{},{a},{b},{c},{a,b},{a,c},{b,c},{a,b,c}}

|M| = n; |P(M)| = $2^n$
{} $\subset$ A ; A $\subset$ A

$A \cup B$ = { x | x $\in A \vee x \in B$ }

$A \cap B$ = { x | x $\in A \wedge x \in B$ } Wenn $A \cap B$ = {} A,B disjunkt

A \textbackslash B = { x | x $\in A \wedge x \notin B$ }

$\mid A \cup B \cup C \mid = \mid A \mid + \mid B \mid + \mid C \mid - \mid
A \cap B \mid - \mid A \cap C \mid - \mid B \cap C \mid + \mid A \cap B \cap
C \mid$

##Relationen

A = {a,b} C = {x,y,z}

A x B = {(a,b) | a $\in A, b \in B$}

A x B = {(a,x), (a,y), (a,z), (b,x), (b,y), (b,z)}

Eine Relation R auf A ist eine Teilmenge von AxA

A = {1,2,3,4} , R = $\leq$

R = {(1,1), (1,2), (1,3), (1,4), (2,2), (2,3), (2,4), (3,3), (3,4), (4,4)}

###Eigenschaften von Relationen
Reflexiv:
$\begin{matrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
0 & 0 & 0 & 1
\end{matrix}$ $I \subset R$ Diagonale alles 1 $\forall a \in A : aRa$

Irreflexiv:
$\begin{matrix}
0 & 1 & 1 & 1 \\
1 & 0 & 1 & 1 \\
1 & 1 & 0 & 1 \\
1 & 1 & 0 & 0
\end{matrix}$ $I \cap R = \emptyset$ Diagonale alles 0 $\forall a \in A : \neg
aRa$

Symetrisch:
$\begin{matrix}
1 & 1 & 0 & 1 \\
1 & 1 & 0 & 0 \\
0 & 0 & 1 & 1 \\
1 & 0 & 1 & 1
\end{matrix}$ $R = R^{-1}$ Wenn A Relation B dann B Relation A $\forall a,b \in
A : aRb \Rightarrow bRa$

Antisymetrisch:
$\begin{matrix}
1 & 0 & 0 & 1 \\
0 & 1 & 1 & 1 \\
0 & 0 & 1 & 1 \\
0 & 0 & 0 & 1
\end{matrix}$ $\forall a,b \in A : aRb \wedge bRa \Rightarrow a=b$

Asymetrisch:
$\begin{matrix}
0 & 0 & 1 & 1 \\
1 & 0 & 1 & 1 \\
0 & 0 & 0 & 1 \\
0 & 0 & 0 & 0
\end{matrix}$ $\forall a,b \in A : aRb \Rightarrow \neg bRa$

Transitiv:
$\begin{matrix}
0 & 0 & 1 & 1 \\
1 & 0 & 1 & 1 \\
0 & 0 & 0 & 1 \\
0 & 0 & 0 & 0
\end{matrix}  \circ 
 \begin{matrix}
0 & 0 & 1 & 1 \\
1 & 0 & 1 & 1 \\
0 & 0 & 0 & 1 \\
0 & 0 & 0 & 0
\end{matrix} = \begin{matrix}
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 1 \\
0 & 0 & 0 & 0 \\
0 & 0 & 0 & 0
\end{matrix}$ $\forall a,b,c \in A : aRb \wedge bRc \Rightarrow aRc$ oder $R^2 \subset
R$

### Besondere Relationen
Ordungsrelation wenn: reflexiv, Antisymetrisch, transitiv

Ordnungsrelationen können mit einem Hasse-Diagramm dargestellt werden.

### Hasse Diagramm Beispiel:
\begin{tikzpicture}
    \node (max) at (0,4) {$(1,1,1)$};
    \node (a) at (-2,2) {$(0,1,1)$};
    \node (b) at (0,2) {$(1,0,1)$};
    \node (c) at (2,2) {$(1,1,0)$};
    \node (d) at (-2,0) {$(0,0,1)$};
    \node (e) at (0,0) {$(0,1,0)$};
    \node (f) at (2,0) {$(1,0,0)$};
    \node (min) at (0,-2) {$(0,0,0)$};
    \draw (min) -- (d) -- (a) -- (max) -- (b) -- (f)
    (e) -- (min) -- (f) --
    (c) -- (max)
    (d) --(b);
    \draw[preaction={draw=white, -,line width=6pt}] (a) -- (e) -- (c);
\end{tikzpicture}

#Funktionen

##Definition
Eine Funktion ist eine Dreiheit bestehend aus Definitionsmenge, Bildmenge und
einer Vorschrift, die jedem Element der Definitionsmenge genau ein Element der
Bildmenge zuordnet.

###Beispiele
A = B = $\mathbb{R}$ und $f(x) = x^2$. Das Bild dieser Funktion ist die Menge
$R_0^+$

Eine Funktion ist nicht immer durch eine einzige Formel definiert:
$f(n) = \begin{cases} n/2, & \mbox{if } n\mbox{ is even} \\ 3n+1, & \mbox{if
} n\mbox{ is odd} \end{cases}$

##Injektive, Surjektive und Bijektive Funktionen
###Surjektiv - Rechtstotal
Jedes Element der Zielmenge wird mindestens einmal als Funktionswert angenommen.

###Injektiv - Linkseindeutig
Jedes Element der Zielmenge wird höchstens einmal als Funktionswert angenommen.

###Bijektiv
Wenn die Funktion sowohl Injektiv als auch Surjektiv ist, ist eine Funktion
Bijektiv.

## Hintereinanderschaltung von Funktionen
Falls $f: A \rightarrow B$ und $g: B \rightarrow C$ kann man die Abbildung
$g \circ f: A \rightarrow C$
$x \rightarrow g(f(x))$
Dies nennt man Hintereinanderschaltung oder Komposition von f und g

##Umkehrabbildung
Ist eine Funktion bijektiv dann existiert zu jedem y $\in$ B genau ein x $\in$
A mit $f(x) = y$
Um die Umkehrabbildung zu erstellen muss man:
1. Nach x aufösen
2. x und y vertauschen
Die Umkehr- oder inverse Abbildung von $f$ wird mit $f^1$

#Natürliche Zahlen

##Die Axiome von Peano

Die natürlichen Zahlen lassen sich mit Hilfe des Axiomensystems von Peano
definieren:

1. 1 $\in \mathbb{N}$
2. Zu jeder natrürlichen Zahl $n \in \mathbb{N}$ existiert ein eindeutiger Nachfolger n+1
3. für jedes $n \in \mathbb{N} gilt n^+ \neq 1.$
4. Seien $m, n \in \mathbb{N}. Falls m^+ = n^+$ gilt ,dann is m=n.
5. Jede Teilmenge K von $\mathbb{N}$, mit den Eigenschaften: $1 \in K$ und $k \in
   K$ ist, dann ist auch $k^1 \in K$ Dann ist gleich $\mathbb{N}$

##Das Prinzip der Vollständigen Induktion
Schritte zum Beweis durch vollständige Induktion

1. Induktionsanfang: Beweise, dass A(1) eine wahre Aussage ist.
2. Voraussetzung: Die Aussage A(k) ist wahr für ein bestimmtes $k \in \mathbb{N}$
3. Behauptung: Die Aussage A(k+1) ist wahr.
4. Beweis: Beweise das unter Annahme der Voraussetzung die Behauptung wahr ist.

##Primzahlen
Eine natürliche Zahl $d \neq 0$ heisst ein Teiler einer natürlichen Zahl n, fals
eine natürliche Zahl r existiert so das gilt n = d*r

Eine natürliche Zahl p > 1 heisst Primzahl, falls 1 und p ihre einzigen Teiler
sind.

Jede natürliche Zahl ist eine Primzahl
Beweis durch starke Induktion

Verankerung: In diesem Fall erfolgt die Verankerung bei n = 2. Da 2 eine
Primzahl ist, is P(2) richtig.

Voraussetzung: Wir nehmen an dass $P(k)$ für alle k mit $2 \leq k \leq n$
richtig ist.

Behauptung: P(n+1)
Falls n + 1 eine Primzahl ist, sind wir fertig. Wenn n+1 keine Primzahl
ist, so gibt es einen Teiler d mit $2 \leq d \leq n$, so das gilt: $n+1 = d*r$

Beweis: Sei $n \geq 2$ eine  natürliche Zahl und sei: $n = p_1*p_2...p_{k-1}*p_k=
q_1*q_2...q_{m-1}*q_m$ 
Durch Umformung und umnummerierung erhalten wir:
$p_2...p_{k-1}*p_k=q_2...q_{m-1}*q_m$
Dieser Schritt kann dan wiederholt werden bis gilt: m=k und $p_i = q_1$

###Sieb des Erastotenes
Das Verfahren beruht auf dem Streichen von Zahlen.

1. Wir schreiben alle Zahlen von 1 bis N auf.
2. Wir streichen 1
3. Wir streichen 2 und alle Vielfachen von 2 ab dem Quadrat also von 4 - N
4. 3 ist die nächste Primzahl. Wir streichen wieder alle Vielfachen ab dem Quadrat.
5. Die nächste freie Zahl ist die nächste Primzahl. (In dem Fall die 5)
6. diese Schritte werden dann stetig wiederholt.

##Der grösste gemeinsame Teiler (ggt)
Der grösste gemeinsame Teiler von zwei Zahlen a und b. a und b haben nur endlich
viele Teiler. Damit kann es auch nur endlich viele gemeinsame Teiler geben.
Anderseits ist die Menge nie leer, denn sie enthält stets mindestens das Element
1. Aus diesen überlegungen folgt, dass dei Menge der gemeinsamen Teiler von
   a und b, ein grösstes gemeinsames Element besitzt. Geschrieben ggT(a,b).
Die Bestimmung durch Primzahlenzerlegung ist sehr aufwendig, es gibt aber
Algorithmen mit denen man den ggT ohne eine Primzahlenzerlegung herleiten kann.

###Der Euklidische Algorithmus
Der euklidische Algorithmus, wie er heutzutage verwendet wird, basiert auf der
Division mit Rest.
Der euklidische Algorithmus benötigt höstens $2log_2(2b)$ Schritte um den ggT von
(a,b) zu berechnen.
Die beiden gegebenen Zahlen a und b wobei $b=r_0$
$a=q_1 \cdot r_0 + r_1$
Hierbei ist $q_1$ Das Ergebnis der Division von $a$ und $b$, bzw $r_0$.

$r_0$ ist b, $r_1$ der Rest aus der Division von $a$ und $b$, bzw $r_0$

im nächsten Schritt folgt nun:
$r_0 = q_2 \cdot r_1 + r_2$

Hier wurden die selben Schritte wie oben durchgeführt, wobei nun $r_0$ durch
$r_1$ dividiert wurde. q ist wieder das ergebnis der Division und $r_2$ der Rest.

Diese Schritte werden dann durchgeführt, bis der Rest 0 entsteht. Dann ist $r_n$
der ggT.
$r_{n-1} = q_{n+1} \cdot r_n + 0$

Beispiel: Gegeben sind die Zahlen 1804 und 328 von denen der ggt bestimmt weden
soll.

1. $1804 = 5 \cdot 328 + 164$
2. $328 = 2 \cdot 164 + 0$
3. Womit der ggT(1804,328) 164 ist.

###Der erweiterte euklidische Algorithmus
Der erweiterte euklidische Algorithmus ist eine Erweiterung des bereits
bekannten eukldischen Algorithmus und wird hauptsächlich dafür verwerndet das
multiplikative inverse von Restklassen zu berechnen. Denn wenn das Tripel $(d
= ggT(a,b),s,t)$ ermittelt, ist entweder $d=1$ und damit $1\equiv t\cdot b (mod
a), t$ also das multiplikative INverse von $b$ modulo $a$, oder aber $d \neq q$,
was bedeutet, dass $b$ module $a$ kein Inverses hat. Dies ist die Grundlage für
Diophantische Gleicheungen oder allgemeiner von ganzzahliger linearer
Gleichungssystemen.
In der Gleichung $d=xa + yb$ mit ggT(a,b) = d sollen die Faktoren x und
y bestimmt werden.
Behauptungen:
$r_n=ggT(a,b)$
$r_n=ax_n + by_n$

Beispiel: a=1884 b=25 

1. $1844 = 73 \cdot 25 + 19 \Rightarrow 19 = 1884 - 73 \cdot 25$ (I)
2. $25 = 1 \cdot 19 + 6 \Rightarrow 6 = 25 - 1 \cdot 19$ (II)
3. $19 = 3 \cdot 6 + 1 (\rightarrow ggT = 1) \Rightarrow 1 = 19 - 3 \cdot 6$ (III)
4. $6 = 6 \cdot 1$

Der ggT ist gemäss dem eukldischen Algorithmus 1

Nun wird sukzessive rückwärts eingesetzt, um 1 (d.h. den ggT von 1844 und 25)
als Linearkombination dieser beiden Zahlen zu darzustellen.

1. III: $1 = 19 - 3 \cdot 6$
2. II für 6 einsetzen: $1 = 19 - 3 \cdot (25 - 1 \cdot 19) = -3 \cdot 25 + 4 \cdot 19$
3. I für 19 einsetzen: $1 = -3 \cdot 25 + 4 \cdot (1844 - 73 \cdot 25) = 4 \cdot
   1884 - 295 \cdot 25$
4. $\rightarrow 4 \cdot 1844 - 295 \cdot 25 = 1$

###Berlekamp Algorithmus
TODO: Fragen!!

Der Berlekamp funktioniert wie der Euklid, jedoch werden die Resultate
nebeneinander geschrieben. Danach wird von hinten (ggT) wieder zurück gerechnet.

also ggT (8,5)

 1 1 1 1

8 5 3 2 1

5 3 2 1 1

$8\cdot (-3)+5\cdot 5 = 1$

Die Resultate wurden also über Kreuz genommen, dies geht im gegensatz zum Euklid
schneller, jedoch kriegt man nicht immer das "kleinst" Mögliche Resultat.

###Lineare diophantische Gleichungen
Bereits beim erweiterten euklidischen Algorithmus wurde die diophantische
Gleichung $ax + by = c$ erwähant. Hierbei gilt. eine diophantische Gleichung ist
dann lösbar wenn, ggT(a,b) c teilt.

Beispiel: $238x + 168y = 126$

Anwendung Euklid:

1. $238 = 1 \cdot 168 + 70$
2. $186 = 2 \cdot 70 + 28$
3. $70 = 2 \cdot 28 + 14$
4. $28 = 2 \cdot 14 + 0$
5. $ggT(168, 258) = 14 \rightarrow 14 teilt 126$

Nun kann von "unten" wieder hochgerechnet werden.

1. $0 \cdot 28 + 1 \cdot 14 = 14 \rightarrow x=0, y=1$
2. Um nun die nächste Zeile nach oben zu berechnen muss das alte y als
   x eingesetzt werden danach muss das Resultat der multiplikation des aktuellen
   Q mit dem alten y addiert werden. also
3. $x=1, y=0+(-2 \cdot 1) \rightarrow -2 \rightarrow 1 \cdot 70 - 2 \cdot 28 = 14$
4. Dies wird dann für die nächsten Schritte gleich durchgeführt.
5. $x=-2, y=1+(-2 \cdot -2) \rightarrow 5 \rightarrow -2 \cdot 186 + 5 \cdot 70 = 14$
6. $x=5, y=-2+(-1 \cdot 5) \rightarrow 7 \rightarrow 5 \cdot 238 - 7 \cdot 168
   = 14$


Wie findet man alle Lösungen, wenn man eine Lösung ($x_0, y_0$) gefunden hat?

Antwort: $x=x_0+ k \cdot \frac{b}{ggT(a,b)}$

$y=y_0+k \cdot \frac{a}{ggT(a,b)}$

##Kongruenz

###Kongruenz
Für natürlich Zahlen gilt: eine ganze Zahl $a \neq 0$ heisst Teiler einer ganzen
Zahl b, wenn eine ganze Zahl c existiert so dass $b = a \cdot c$

Gegeben ist eine natürliche Zahl m. Zwei ganze Zahlen a und b heissen kongruent
module m, geschrieben $a \equiv b (mod\; m)$
Falls m die Zahl a-b teilt.

Beispiel:

$2 \equiv 7 \; mod \; 5$

Denn 2 / 5 = 0 Rest 2 und 7 / 5 = 1 Rest 2. Die Reste sind gleich!

Dadurch können hohe Rechnungen vereinfacht werden.

$5^10 mod 5$

1. $5^2 = 25 \equiv 5\; mod \; 5$
2. $5^4 = 5^2 \cdot 5^2 \equiv 5 \cdot 5 \; mod \; 5 \equiv 5 \; mod \; 5$
3. $5^10 = 5^2 \cdot 5^4 \cdot 5^4 \equiv 5 \cdot 5 \cdot 5 \; mod \; 5 \equiv
   5 \; mod \; 5$ 

###Formeln
Es gilt: wem x, y, u v ganze Zahlen sind und m eine natürliche Zahl:

Wenn $x \equiv y (mod \; m)$ und $u \equiv v (mod \; m)$ dann:

$x + u \equiv y + v (mod \; m)$ und $x \cdot u \equiv y \cdot v (mod \; m)$


###multiplikatives Inverses
Wenn ggT(a, m) = 1, dann existiert eine ganze Zahl b für die gilt:
$a\cdot b \equiv 1\; mod\; m$

Das multiplikative Inverse von a modulo m ist bis auf ein Vielfaches von
m bestimmt, wenn wir verlangen, dass b zwischen  0 und m sein
soll, dann ist b eindeutig bestimmt.

###Berechnen des multiplikativen Inversen
Wegen ggT(a, m) = 1 existieren ganze Zahlen x und y, so das gilt:

$1 = x \cdot a + y \cdot m$
Daraus folgt:

$x \cdot a \equiv 1 \; mod \; m$

Also ist x ein multiplikatives Inverses von a module m.

###Der kleine fermatsche Satz
p ist eine Primzahl und a eine natürliche Zahl mit p teilt nicht a. Dann gilt:
$a^{p-1} \equiv 1 \; mod \; p$

###Die eulersche Funktion
Die eulersche Funktion $\Phi (n)$ (n ist eine natürliche Zahl) liefert die
Anzahl der Zahlen die teilerfremd zu n sind)

Beispiel: $\Phi (15)$ von den 15 Zahlen:

**1** **2** 3 **4** 5 6 **7** **8** 9 **10** **11** 12 **13** **14** 15

sind 8 Teilerfremd zu 15 also $\Phi (15) = 8$

Falls p eine Primzahl ist, dann gilt : $\Phi (p) = p-1$

Falls p und q zwei Primzahlen sind, dann gilt: $\Phi (pq) = (p-1)(q-1)$

Es gilt: $a^{\Phi (m)} \equiv 1 \; mod \; m$ Wenn m eine Primzahl ist, gilt
also wieder der kleine Zahl von Fermat

### Der Chinesische Restsatz

![Chinesischer Restsatz](img/chinesischerRestsatz.png)

### Square and Multiply Algorithmus

1. $x \equiv a^b(mod \; m)$
2. b = binäre Darstellung des exponenten
3. für alle zahlen der binären Darstellung ausser der ersten S -> wenn 0 SM wenn
   1
4. x = sma(a) mit S=Quadrieren SM = Quadrieren und Multiplizieren mit a mod(m)

Beispiel: $x \equiv 3^{13}(mod \; 11)$

1. $b = (1101)_2$
2. sma = SM S SM (101)
3. $3 \rightarrow 9 \rightarrow 27 \equiv 5 \rightarrow 25 \equiv 3 \rightarrow
   9 \rightarrow 27 \equiv 5(mod \; 11)$

### Primitivwurzeln
Die Zahl 3 ist eine Primitivwurzel von 7 da gilt:

* $3^1 \equiv 3 (mod \; 7)$
* $3^2 \equiv 2 (mod \; 7)$
* $3^3 \equiv 6 (mod \; 7)$
* $3^4 \equiv 4 (mod \; 7)$
* $3^5 \equiv 5 (mod \; 7)$
* $3^6 \equiv 1 (mod \; 7)$

Es lasen sich also alle Elemente der primen Restklassengruppe modulo 7 als
Potenzen von 3 darstellen. 2 wäre keine Primitivwurzel von 7 da sich die Reste
wiederholen.

Die Anzahl der Primitivwurzeln ist $\Phi (p-1) = \Phi (\Phi (p))$

###Diskreter Logarithmus
Den diskreten Logarithmus erklärt man am besten an einem Beispiel.
Beispiel: Primzahl p = 11 Primitivwurzel = 2

* $2^0 = 1 \equiv 1 \; mod \; 11$
* $2^1 = 2 \equiv 2 \; mod \; 11$
* $2^2 = 4 \equiv 4 \; mod \; 11$
* $2^3 = 8 \equiv 8 \; mod \; 11$
* $2^4 = 16 \equiv 5 \; mod \; 11$
* $2^5 = 32 \equiv 10 \; mod \; 11$
* $2^6 = 64 \equiv 9 \; mod \; 11$
* $2^7 = 128 \equiv 7 \; mod \; 11$
* $2^8 = 256 \equiv 3 \; mod \; 11$
* $2^9 = 512 \equiv 6 \; mod \; 11$

\begin{table}[h]
\begin{tabular}{lllllllllll}
a      & 0 & 1 & 2 & 3 & 4 & 5  & 6 & 7 & 8 & 9 \\
$2^a\equiv x\; mod 7$ & 1 & 2 & 4 & 8 & 5 & 10 & 9 & 7 & 3 & 6
\end{tabular}
\end{table}

### Zahletheoritische Wurzeln
